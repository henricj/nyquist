<html><head><title>XLISP :answer</title>

<link rel="stylesheet" type="text/css" href="reference.css">

</head>

<body>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

<hr>

<h1>:answer</h1>

<hr>

<p><table cellpadding="0" cellspacing="0" style="margin-left:10px"><tbody>
<tr valign="top">
  <td><nobr>Type:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>message selector</nobr></td>
</tr>
<tr valign="top">
  <td><nobr>Source:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>xlobj.c</nobr></td>
</tr>
</tbody></table></p>

<h2>Syntax</h2>

<p><div class="box">

<dl>
<dt><nobr>(<a href="send.htm">send</a> <i>class</i> <b>:answer</b> <i>selector fargs body</i>)</nobr></dt>
<dd><i>class</i> - an existing <a href="class.htm">class</a><br>
<i>selector</i> - the message selector symbol<br>
<i>fargs</i> - formal argument list of the same form as a <a href="lambda.htm">lambda</a> argument list<br>
<i>body</i> - a list containing the method code<br>
returns - the <a href="class.htm">class</a> object</dd>
</dl>

</div></p>

<h2>Description</h2>

<p>The ':answer' message selector adds or changes a method in the specified
<a href="class.htm">class</a>. <nobr>This method</nobr> consists of the
message selector symbol, the formal argument list and the executable code
associated with the message.</p>

<h2>Examples</h2>

<pre class="example">
(setq myclass (send class :new '(var)))  <font color="#008844">; create MYCLASS with VAR</font>

(send myclass :answer :isnew '()         <font color="#008844">; set up initialization</font>
  '((setq var nil) self))

(send myclass :answer :set-it '(value)   <font color="#008844">; create :SET-IT message</font>
  '((setq var value)))

(send myclass :answer :mine '()          <font color="#008844">; create :MINE message</font>
  '((print "hi there")))

(setq my-obj (send myclass :new))        <font color="#008844">; create MY-OBJ of MYCLASS</font>
(send my-obj :set-it 5)                  <font color="#008844">; VAR is set to 5</font>
(send my-obj :mine)                      <font color="#008844">; prints  "hi there"</font>
</pre>

<p><b>Note:</b> When you define a message in a

<a href="class.htm">class</a>, the message is only valid for
<b>instances</b> of the <a href="class.htm">class</a> or its
<nobr>sub-classes</nobr>. <nobr>You will</nobr> get an error if you try to
send the message to the <a href="class.htm">class</a> where it was first
defined. <nobr>If you</nobr> want to add a message to a
<a href="class.htm">class</a>, you need to define it in the
<nobr>super-class</nobr> of the class.</p>

<p><b>Message structure:</b> The normal XLISP convention for a message is to
have a valid symbol preceeded by a colon like
<a href="keyword-isnew.htm">:isnew</a> or ':my-message'. However, it is
possible to define a message that is a symbol without a colon, but this
pollutes the global namespace and also makes the code less readable.</p>

<p>See also:</p>

<ul>
<li><nobr><a href="../manual/objects.htm">XLISP Object System</a></nobr></li>
</ul>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to Top</nobr></a></p>

<hr>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

</body></html>