<html><head><title>XLISP read</title>

<link rel="stylesheet" type="text/css" href="reference.css">

</head>

<body>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

<hr>

<h1>read</h1>

<hr>

<p><table cellpadding="0" cellspacing="0" style="margin-left:10px"><tbody>
<tr valign="top">
  <td><nobr>Type:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>function (subr)</nobr></td>
</tr>
<tr valign="top">
  <td><nobr>Source:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>xlfio.c, xlread.c</nobr></td>
</tr>
</tbody></table></p>

<h2>Syntax</h2>

<dl>
<dt>(<i>read</i> [<i>source</i> [<i>eof-result</i> [<i>recursive-flag</i>]]])</dt>
<dd><i>source</i> - an optional source, must be a file pointer or stream, the
default is <a href="global-standard-input.htm">*standard-input*</a><br>
<i>eof-result</i> - an optional expression, default is
<a href="nil.htm">NIL</a><br>
<i>recursive-flag</i> - an optional expression,
<a href="nil.htm">NIL</a> or
non-<a href="nil.htm">NIL</a><br>
returns - the expression read</dd>
</dl>

<h2>Description</h2>

<p>The 'read' function reads an expression from the specified 'source'. The
expression read is a normal XLISP expression, not necessarily a line. This
means that white space is removed, where 'white space' is blanks, empty
lines and comment lines. Read-macro expansions will occur. The expression
needs to be an atom [numeric, string or symbol] or a valid list. It can span
several lines. The expression read is returned as the result. The 'source'
may be a file pointer or a stream. If there is no 'source',
<a href="global-standard-input.htm">*standard-input*</a> is the default. If an
end-of-file is encountered in the 'source', then the 'eof-result' value will
be returned as the result.</p>

<p>If you wish to read just lines or characters, refer to the
<a href="read-line.htm">read-line</a> or
<a href="read-char.htm">read-char</a> functions.</p>

<p>The 'recursive-flag' is intended for use with embedded calls to 'read'.
This is useful in read-macro and read-table uses. If 'recursive-flag' is
<nobr>non-<a href="nil.htm">NIL</a> ,</nobr> 'read' does not
expect itself to be at a 'top-level', but recursively executing within
another 'read' that is in progress.</p>

<h2>Examples</h2>

<pre class="example">
(setq fp (open "f" :direction :output))  <font color="#008844">; set up file</font>
(print "hello" fp)                       <font color="#008844">; and fill it with stuff</font>
(print 12.34 fp)
(princ "'(a b" fp) (terpri fp)
(princ "; comment" fp) (terpri fp)
(princ " c d)" fp )
(close fp)

(setq fp (open "f" :direction :input))   <font color="#008844">; now read the file</font>
(read fp "done")                         <font color="#008844">; returns "hello"</font>
(read fp "done")                         <font color="#008844">; returns 12.34</font>
(read fp "done")                         <font color="#008844">; returns (QUOTE (A B C D))</font>
                                         <font color="#008844">;   note the macro expansion of QUOTE</font>
                                         <font color="#008844">;   note that "; comment" is gone</font>
(read fp "done")                         <font color="#008844">; returns "done"</font>
(close fp)
</pre>

<p><b>Common Lisp:</b> The XLISP and Common Lisp 'read' functions are
similar. They both allow for 'source', 'eof-result' and 'recursive-flag'.
However, in Common LISP, there is an additional end-of-file error parameter.
This parameter occurs right after 'source' and specifies whether or not to
flag an error on end-of-file. So, when porting, remember there is one
additional argument in Common Lisp's 'read' function. You need to be
concerned about this if you use more than just a 'source' argument, going
either from XLISP to Common LISP or vice versa.</p>

<p><b>Common Lisp:</b> Common Lisp specifies that 'read' operations with a
'source' of <a href="nil.htm">NIL</a> will come from
<a href="global-standard-input.htm">*standard-input*</a>. XLISP does not read the
input from <a href="global-standard-input.htm">*standard-input*</a> with a
'source' of <a href="nil.htm">NIL</a>. Common Lisp also
specifies that a 'source' of <a href="t.htm">&nbsp;T&nbsp;</a>
will read from *terminal-io* which is not defined in XLISP by default. XLISP
does not allow <a href="t.htm">&nbsp;T&nbsp;</a> as a valid
argument for 'source'.</p>

<p>See the
<a href="../manual/xlisp-man-027.htm#read">read</a>
function in the <nobr>XLISP 2.0</nobr> manual.</p>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to Top</nobr></a></p>

<hr>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

</body></html>