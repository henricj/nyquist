<html><head><title>XLISP sublis</title>

<link rel="stylesheet" type="text/css" href="reference.css">

</head>

<body>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

<hr>

<h1>sublis</h1>

<hr>

<p><table cellpadding="0" cellspacing="0" style="margin-left:10px"><tbody>
<tr valign="top">
  <td><nobr>Type:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>function (subr)</nobr></td>
</tr>
<tr valign="top">
  <td><nobr>Source:</nobr></td>
  <td><nobr>&nbsp;&nbsp;-&nbsp;&nbsp;</nobr></td>
  <td width="100%"><nobr>xllist.c</nobr></td>
</tr>
</tbody></table></p>

<h2>Syntax</h2>

<dl>
<dt>(sublis <i>a-list expr</i> [{:test | :test-not} <i>test</i>])</dt>
<dd><i>expr</i> - the expression to substitute within, an atom<br>
<i>a-list</i> - the association list to search<br>
test - optional test function, default is <a href="eql.htm">eql</a><br>
returns - the expression with substitutions</dd>
</dl>

<h2>Description</h2>

<p>The 'sublis' function searches through an 'expr' and replaces each of the
elements in the 'expr' that match the <a href="car.htm">car</a>
of the elements of the association list 'a-list' with the

<a href="cdr.htm">cdr</a> of elements of the 'a-list'. The 'expr'
with the substitutions, if any, is returned. You may specify your own test
with the ':test' and ':test-not' keywords followed by the 'test' you wish to
perform. The 'sublis' function is normally used with a dotted pair <nobr>(A
. B)</nobr> association list. It is possible to use a normal list pair
<nobr>(A B)</nobr> or a list of the form <nobr>(A (B C)).</nobr></p>

<h2>Examples</h2>

<pre class="example">
(sublis '((a . b))   '(a a))            <font color="#008844">; returns (B B)</font>
(sublis '((a b))     '(a a))            <font color="#008844">; returns ((B) (B))</font>
(sublis '((a (b c))) '(a a))            <font color="#008844">; returns (((B C)) ((B C)))</font>

(setq newlist '((a . 1)                 <font color="#008844">; set up an association list</font>
                (b . 2)
                (c . 3)))

(sublis newlist '(a b c d e f b a c))   <font color="#008844">; returns (1 2 3 D E F 2 1 3)</font>

(sublis newlist 'a)                     <font color="#008844">; returns 1</font>

(setq mylist '((a my-a) (b his-b)       <font color="#008844">; set up a non-dotted pair assoc list</font>
               (c her-c) (d end)))

(sublis mylist '(a b c d e f g))        <font color="#008844">; returns ((MY-A) (HIS-B)</font>
                                        <font color="#008844">;          (HER-C) (END) E F G)</font>

(sublis mylist 'a)                      <font color="#008844">; returns (MY-A)</font>

(setq numlist '((1 . a) (2 . b)) )      <font color="#008844">; set up a new assoc list</font>

(defun mytest (x y) (princ ": ")        <font color="#008844">; set up my own test function with 2 parameters</font>
                    (princ x)           <font color="#008844">; to see what SUBLIS does</font>
                    (princ " ")
                    (princ y) (terpri)
                    t)                  <font color="#008844">; always return T</font>

(sublis numlist '(3 1) :test mytest)    <font color="#008844">; prints : (3 1) 1</font>
                                        <font color="#008844">; returns A - because the entire list succeeds</font>
                                        <font color="#008844">; with the test and so (1 . A) produces the</font>
                                        <font color="#008844">; returned value</font>

(sublis numlist '(1) :test-not mytest)  <font color="#008844">; prints : (1) 1</font>
                                        <font color="#008844">;        : (1) 2</font>
                                        <font color="#008844">;        : 1 1</font>
                                        <font color="#008844">;        : 1 2</font>
                                        <font color="#008844">;        : NIL 1</font>
                                        <font color="#008844">;        : NIL 2</font>
                                        <font color="#008844">; returns (1) - because SUBLIS tried to match</font>
                                        <font color="#008844">; every list/sublist against each entry in the</font>
                                        <font color="#008844">; assoc list and failed because of the :TEST-NOT</font>
                                        <font color="#008844">; and so returned the original list unaltered</font>
</pre>

<p><b>Note:</b> The SUBLIS function can work with a list or string as the
'expr'. However, the default <a href="eql.htm">eql</a> test does
not work with lists or strings, only symbols and numbers. To make this work,
you need to use the ':test' keyword along with
<a href="equal.htm">equal</a> for 'test'.</p>

<p><b>Common Lisp:</b> Common LISP supports the use of the ':key' keyword
which specifies a function that is applied to each element of 'a-list'
before it is tested. XLISP does not support this.</p>

<p>See the
<a href="../manual/xlisp-man-016.htm#sublis">sublis</a>
function in the <nobr>XLISP 2.0</nobr> manual.</p>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to Top</nobr></a></p>

<hr>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples/examples.htm">Examples</a> |
<a href="reference-index.htm">Reference</a>

</body></html>