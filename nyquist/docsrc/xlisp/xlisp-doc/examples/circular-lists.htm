<html><head>

<title>Circular Lists</title>

<style type="text/css">
.example {
  color: #000000;
  background-color: #F5F5F5;
  padding: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  width:auto;
}
.button {
  color: #000000;
  background-color: #F5F5F5;
  padding-top: 1px;
  padding-bottom: 1px;
  padding-left: 4px;
  padding-right: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  white-space: pre;
}
.box {
  color: #000000;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 16px;
  padding-right: 16px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
}
</style>

</head>

<body>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="examples.htm">Examples</a> |
<a href="../reference/reference-index.htm">Reference</a>

<hr>

<h1>Circular Lists</h1>

<hr>


<hr>

<h2>Known XLISP Problems with Circular Lists</h2>

<hr>

<p><b>Warning:</b> do <b>not</b> try this with XLISP:</p>

<pre class="example">
&gt; (setq my-list (cons 'item nil))  <font color="#008844">; create a 1-item list</font>
(ITEM)

&gt; (setf (cdr my-list) my-list))    <font color="#008844">; create the circle</font>
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM
ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ITEM ...
</pre>

<p>If you're lucky you can <a href="../reference/break.htm">break</a> the
loop. <nobr>If not</nobr>, then XLISP will print the ITEM forever.</p>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to top</a></nobr></p>

<a name="circular-nth"></a>

<hr>

<h2>c-nth</h2>

<hr>

<p>The '<nobr>c-nth</nobr>' macro accesses a linear list as if it were
circular:</p>

<pre class="example">
(defmacro <font color="#0000CC">c-nth</font> (index list)
  `(nth ,(rem index (length list)) ,list))
</pre>

<p>Note that with every call to '<nobr>c-nth</nobr>', the length of the list
will be computed again.</p>

<p>Examples:</p>

<pre class="example">
(c-nth 0 '(1 2 3))  =&gt; 1
(c-nth 1 '(1 2 3))  =&gt; 2
(c-nth 2 '(1 2 3))  =&gt; 3
(c-nth 3 '(1 2 3))  =&gt; 1
(c-nth 4 '(1 2 3))  =&gt; 2
(c-nth 5 '(1 2 3))  =&gt; 3
(c-nth 6 '(1 2 3))  =&gt; 1
(c-nth 7 '(1 2 3))  =&gt; 2
</pre>

Because '<nobr>c-nth</nobr>' is a macro expanding into a regular
<a href="../reference/nth.htm">nth</a> form, '<nobr>c-nth</nobr>' can be
used <nobr>with <a href="../reference/setf.htm">setf</a></nobr>:

<pre class="example">
(setq lst '(1 2 3))      =&gt; (1 2 3)
lst                      =&gt; (1 2 3)
(setf (c-nth 4 lst) 'x)  =&gt; X
lst                      =&gt; (1 X 3)
</pre>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to top</a></nobr></p>

<hr>

<a href="../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../manual/contents.htm">Contents</a> |
<a href="../tutorials/tutorials.htm">Tutorials</a> |
<a href="examples.htm">Examples</a> |
<a href="../reference/reference-index.htm">Reference</a>

</body></html>
