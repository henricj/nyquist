<html><head>

<title>cl:multiple-value-call</title>

<style type="text/css">
.example {
  color: #000000;
  background-color: #F5F5F5;
  padding: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  width:auto;
}
.button {
  color: #000000;
  background-color: #F5F5F5;
  padding-top: 1px;
  padding-bottom: 1px;
  padding-left: 4px;
  padding-right: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  white-space: pre;
}
.box {
  color: #000000;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 16px;
  padding-right: 16px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
}
</style>

</head>

<body>

<a href="../../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../../manual/contents.htm">Contents</a> |
<a href="../../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples.htm">Examples</a> |
<a href="../../reference/reference-index.htm">Reference</a>

<hr>

<h1>cl:multiple-value-call</h1>

<hr>

<p>The <nobr>cl:<b>multiple-value-call</b></nobr> macro applies a function
to a list of return values:</p>

<p><div class="box">

<dl>
<dt>(cl:<b>multiple-value-call</b> <i>function</i> [<i>expr1</i> ...])</dt>
<dd><i>function</i> - a  Lisp expression evaluating to a function call<br>
<i>exprN</i> - arbitrary Lisp expressions<br>
returns - the values returned by the function</dd>
</dl>

</div></p>

<pre class="example">
(defmacro <font color="#0000CC">cl:multiple-value-call</font> (function &amp;rest exprs)
  (let (args)
    (dolist (expr exprs)
      (setq  <font color="#AA5500">cl:*multiple-values*</font> nil)
      (let* ((result (eval expr)))
        (if <font color="#AA5500">cl:*multiple-values*</font>
            (dolist (rslt <font color="#AA5500">*rslt*</font>) (push rslt args))
            (push result args))))
    (setq args (reverse args))
    `(progn
       (setq <font color="#AA5500">cl:*multiple-values*</font> nil)
       (apply ,function ',args)))
</pre>

<p>The <nobr>cl:<b>multiple-value-call</b></nobr> macro first evaluates the
expressions and collects all return values in a single list, then the
'function' form is evaluated and the resulting function call is applied to
the list of values.</p>

<p>Before applying the function to the list of values the
<nobr><a href="global-multiple-values.htm">cl:*multiple-values*</a></nobr>
variable is set to <a href="../../reference/nil.htm">NIL</a>, the final value of
<nobr><a href="global-multiple-values.htm">cl:*multiple-values*</a></nobr>
depends on the 'function' argument.</p>

<p>Examples:</p>

<pre class="example">
&gt; (funcall #'+
    (cl:values 1 2)
    (cl:values 3 4))
4  <font color="#008844">; (apply #'+ (1 3))</font>

&gt; (cl:multiple-value-call #'+
    (cl:values 1 2)
    (cl:values 3 4))
10  <font color="#008844">; (apply #'+ (1 2 3 4))</font>
</pre>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to top</a></nobr></p>

<hr>

<a href="../../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../../manual/contents.htm">Contents</a> |
<a href="../../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples.htm">Examples</a> |
<a href="../../reference/reference-index.htm">Reference</a>

</body></html>
