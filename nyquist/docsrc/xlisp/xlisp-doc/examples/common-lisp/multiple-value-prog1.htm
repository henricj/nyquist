<html><head>

<title>cl:multiple-value-prog1</title>

<style type="text/css">
.example {
  color: #000000;
  background-color: #F5F5F5;
  padding: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  width:auto;
}
.button {
  color: #000000;
  background-color: #F5F5F5;
  padding-top: 1px;
  padding-bottom: 1px;
  padding-left: 4px;
  padding-right: 8px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
  white-space: pre;
}
.box {
  color: #000000;
  padding-top: 4px;
  padding-bottom: 4px;
  padding-left: 16px;
  padding-right: 16px;
  border: #808080;
  border-style: solid;
  border-width: 1px;
}
</style>

</head>

<body>

<a href="../../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../../manual/contents.htm">Contents</a> |
<a href="../../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples.htm">Examples</a> |
<a href="../../reference/reference-index.htm">Reference</a>

<hr>

<h1>cl:multiple-value-prog1</h1>

<hr>

<p>The <nobr>cl:<b>multiple-value-prog1</b></nobr> macro is like
<a href="../../reference/prog1.htm">prog1</a>, but it can handle multiple
values:</p>

<p><div class="box">

<dl>
<dt>(cl:<b>multiple-value-prog1</b> <i>expr1</i> [<i>expr2</i> ...])</dt>
<dd><i>exprN</i> - arbitrary Lisp expressions<br>
returns - the values returned by the first expression</dd>
</dl>

</div></p>

<pre class="example">
(defmacro <font color="#0000CC">cl:multiple-value-prog1</font> (expr &amp;rest body)
  (setq <font color="#AA5500">cl:*multiple-values*</font> nil)
  (let* ((result (eval expr)))
    (if <font color="#AA5500">cl:*multiple-values*</font>
        `(progn ,@body
                (setq <font color="#AA5500">*rslt*</font> ',<font color="#AA5500">*rslt*</font>
                      <font color="#AA5500">cl:*multiple-values*</font> t)
                ',result)
        `(progn ,@body ',result))))
</pre>

<p>The <nobr>cl:<b>multiple-value-prog1</b></nobr> macro evaluates the first
expression and saves all the values returned by the evaluation. <nobr>It
then</nobr> evaluates each of the following expressions from left to right,
discarding their values. After the evaluation is finished, the
<nobr><a href="global-multiple-values.htm">cl:*multiple-values*</a></nobr>
and <a href="../../reference/global-rslt.htm">*rslt*</a> variables are
restored and the primary value from evaluating the fist expression is
returned.</p>

<p><nobr>The
<a href="global-multiple-values.htm">cl:*multiple-values*</a></nobr>
variable <nobr>is <a href="../../reference/t.htm">&nbsp;T&nbsp;</a></nobr>
if evaluating the first expression returns multiple values and
<a href="../../reference/nil.htm">NIL</a> with a normal return value.</p>

<p><nobr>&nbsp;&nbsp;<a href="#top">Back to top</a></nobr></p>

<hr>

<a href="../../start.htm">Nyquist / XLISP 2.0</a>&nbsp; -&nbsp;
<a href="../../manual/contents.htm">Contents</a> |
<a href="../../tutorials/tutorials.htm">Tutorials</a> |
<a href="../examples.htm">Examples</a> |
<a href="../../reference/reference-index.htm">Reference</a>

</body></html>
