<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <meta name="GENERATOR" content="Microsoft FrontPage 3.0">
    <title>Sequence Example</title>
    <style>body {max-width: 40em}</style>
  </head>
  <body>
    <h1>Sequence Example</h1>
    <p>A sequence of notes is often specified by a "note list,"
      consisting of times, durations, other transformations, and a
      parameterized behavior to generate the sound. The following is an
      example. <i>Note: examples are given in SAL syntax followed by
        Lisp syntax in a smaller font.</i><br>
    </p>
    <pre>function ringpat1() 
  return sim(0.6 * ring(0.6, 45, 2) @ 0.0,
             0.5 * ring(0.8, 40, 1.5) @ 0.2,
             0.8 * ring(1 44, 1) @ 0.6,
             0.7 * ring(1.2, 32, 0.8) @ 0.8) * 0.8<br><br><small><small>(defun ringpat1 () 
  (scale 0.8 
    (sim
      (scale 0.6 (at 0.0 (ring 0.6 45 2)))
      (scale 0.5 (at 0.2 (ring 0.8 40 1.5)))
      (scale 0.8 (at 0.6 (ring 1 44 1)))
      (scale 0.7 (at 0.8 (ring 1.2 32 0.8))) 
    )))</small></small></pre><small><small>

</small></small><p>Notice that there are 4 sounds. The sounds are shifted in 
time using the @ (at)
transformation, and all four sounds are combined using the <code>sim</code>
construction.
Because of the time shifts, the sounds do not take place simultaneously, 
but they may overlap somewhat.</p>

<p>Durations are specified by the first parameter to <code>ring</code>, so no <code>stretch</code>
transformations are used here. Each sound is individually scaled.</p>

<p>To play this sound, you need the <code>ring</code> function from <a href="scratch_tutorial.htm">Vinyl Scratch Tutorial</a>. Then you can type:</p>

<pre>play ringpat1()<br><br><small><small>(play (ringpat1))
</small></small></pre><small><small>

</small></small><p>Try the following combination, which plays a short and long version of <code>ringpat1</code>
at about the same time:</p>

<pre>play sim(1.0 * ringpat1() @ 0.0,
         0.7 * ringpat1() ~ 1.5 @ 0.05)
<br><small><small>(play (sim
        (scale 1.0 (at 0.0 (ringpat1)))
        (scale 0.7 (at 0.05 (stretch 1.5 (ringpat1)))) ))
</small></small><br></pre>





</body></html>